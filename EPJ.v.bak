module EPJ(clk,rst,a,unlock);
output reg unlock;
input clk,rst;
input a[9:0];

reg [2:0] state;
reg [2:0] next_state;

parameter [2:0] s_rst = 3'b000;
parameter [2:0] s1 = 3'b001;
parameter [2:0] s2 = 3'b010;
parameter [2:0] s3 = 3'b011;
parameter [2:0] s4 = 3'b100;

always @(posedge clk)
begin
if(rst)
state = s_rst;
else
state = next_state;
end 
always @(state,a)
begin
case(state)

s_rst: 
if(next_state==a[2])
state = s1;
else 
state = s_rst;

s1:
if(next_state==a[6])
state = s2;
else 
state = s_rst;

s2:
if(next_state==a[1])
state = s3;
else 
state = s_rst;

s3:
if(next_state==a[9])
state = s4;
else 
state = s_rst;

default: next_state = s_rst;
endcase 
end
always @(state)
begin
case(state)
s_rst: unlock<=1'b0;
s1: unlock<=1'b0;
s2: unlock<=1'b0;
s3: unlock<=1'b0;
s4: unlock<=1'b1;
default: unlock<=1'b0;
endcase
end
endmodule 